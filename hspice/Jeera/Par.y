-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Jeera.Par where
import Jeera.Abs
import Jeera.Lex
import Jeera.ErrM

}

%name pDesign Design

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 ';' { PT _ (TS _ 1) }
 '=' { PT _ (TS _ 2) }
 'Capacitor' { PT _ (TS _ 3) }
 'Inductance' { PT _ (TS _ 4) }
 'Registor' { PT _ (TS _ 5) }
 'Voltage' { PT _ (TS _ 6) }
 '{' { PT _ (TS _ 7) }
 '}' { PT _ (TS _ 8) }

L_IDENT { PT _ (T_IDENT $$) }
L_err    { _ }


%%

IDENT    :: { IDENT} : L_IDENT { IDENT ($1)}

Design :: { Design }
Design : ListDeviceDecl { Design $1 } 


DeviceDecl :: { DeviceDecl }
DeviceDecl : DeviceType '{' ListAssignment '}' { DeviceDecl $1 $3 } 


ListDeviceDecl :: { [DeviceDecl] }
ListDeviceDecl : DeviceDecl ';' { (:[]) $1 } 
  | DeviceDecl ';' ListDeviceDecl { (:) $1 $3 }


DeviceType :: { DeviceType }
DeviceType : 'Registor' { DeviceType_Registor } 
  | 'Capacitor' { DeviceType_Capacitor }
  | 'Inductance' { DeviceType_Inductance }
  | 'Voltage' { DeviceType_Voltage }


Assignment :: { Assignment }
Assignment : IDENT '=' IDENT { Assignment $1 $3 } 


ListAssignment :: { [Assignment] }
ListAssignment : {- empty -} { [] } 
  | Assignment { (:[]) $1 }
  | Assignment ';' ListAssignment { (:) $1 $3 }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

