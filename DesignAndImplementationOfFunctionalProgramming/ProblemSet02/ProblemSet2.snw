% (c) 2011, Dilawar Singh
% dilawar@ee.iitb.ac.in
% 

\documentclass{article}
\usepackage{amsmath}
\usepackage{noweb}

\begin{document}
\pagestyle{noweb}

@ \paragraph{Problem 1}
   Longest Increasing Subsequence : Given a sequence of $n$ real numbers
   $a_1 \ldots a_n$ , determine a subsequence (not necessarily contiguous) of maximum
   length in which the values in the subsequence form a strictly increasing
   sequence.

Let the given sequence of real numbers is $S$. We are only interested in the
strictly increasing subsequence. A strictly increasing subsequence $P$ of a
sequence $S$ is a subsequence of $S$ such that $\forall e \in P, e \in S$ and any two
consecutive elements $p_i, p_j \in P$ satisfy $p_i \le p_j $ whenever $p_i$ is not
the highest element of $P$.


Since elements of sequence are real numbers they honour the law to trichotomy
e.g. $\forall a, b \in S$, the statement $ a < b \lor a > b \lor a = b$ is a tautology.

It follows that if a sequence $S$ is a strictly decreasing sequence then it has trivial
subsequences of length 1 which are strictly increasing i.e. any single element of
$S$ is such a sequence. For instance, sequence $10,9,8 \ldots 1$ does not a
subsequence of length more than 1 which is strictly increasing: all possible
subsequece which are strictly increasing are $(10)$, $(9)$, ..., $(1)$. Thus, if a
sequence has a strictly increasing non-trivial subsequence then it must have at least two
consecutive elements $a$, and $b$ such that $a < b$.

<<Problem1>>=
--findStrictIncreasingSubSeq :: [Int] -> [Int]
--findStrictIncreasingSubSeq (x:xs)

convertToBooleanTable :: [Int] -> [[Bool]]
convertToBooleanTable [] = []
convertToBooleanTable (z:zs)
        = (convertToBooleanList z (z:zs)) : (convertToBooleanTable zs)


convertToBooleanList :: Int -> [Int] -> [Bool]
convertToBooleanList x [] = []
convertToBooleanList x (y:ys)
        | x < y = True : convertToBooleanList x ys
        | otherwise = False : convertToBooleanList x ys


@ \paragraph{Problem 2} 
    Box Stacking : You are given a set of n types of rectangular 3-D boxes,
   where the ith box has height hi , width wi and depth di (all real numbers).
   You want to create a stack of boxes which is as tall as possible, but you
   can only stack a box on top of another box if the dimensions of the 2D
   base of the lower box are each strictly larger than those of the 2D base of
   the higher box. Of course, you can rotate a box so that any side functions
   as its base. It is also allowable to use multiple instances of the same type
   of box.

@ \paragraph{Problem 3} 
    Write a function (perm n r) which will behave as follows:
    perm 5 1 = [[1], [2], [3], [4], [5]]
    perm 5 2 = [[1, 2], [1, 3], [1, 4], [1, 5], [2, 1], [2, 3], [2, 4], [2, 5],
                [3, 1], [3, 2], [3, 4], [3, 5], [4, 1], [4, 2], [4, 3], [4, 5],
                [5, 1], [5, 2], [5, 3], [5, 4]]

   What is  an appropriate value  of (perm n  0). You can  assume that
   perm is always called with n >= r.

@ \paragraph{Problem 4} 
   Suppose that you are given a non-empty list of coins in which there
   is  exactly one  fake  coin that  is  lighter than  the others.  We
   represent the coins in such a list as:

coins = [(1,5),(2,5),(3,5),(4,5),(5,5),(6,5),(7,5),(8,5),(9,3),(10,5),(11,5)]

This says that the  9th coin has a weight of 3  units. All other coins
have a weight of 5 units.

Write a function called (find fake  l) which will take a list of coins
and find the number of the fake coin.

In the function find fake, you are not permitted to look at the weight
of any  individual coin. For example,  you can say head  coins but not
snd (head coins). Note that this restriction applies only to find fake
and not to compare weights.

Write find  fake so that  it does not compare weights  more than
log2n times, where n is the length of l. 

@ \paragraph{Problem 5}
Given a number n and a list l, write a function can generate? which
returns True  if l has a  sublist (obtained by  dropping some elements
from l) which sums up to n, and False otherwise.

@ \paragraph{Problem 6} 
Suppose we decide to  represent polynomials of a single variable by
the coefficients of the individual terms. As examples:

[0, 2,  0, 3, 2] represents  2 * x4 +  3 * x3 +  2 * x, and  [5, 3, 2]
represents 2 * x2 + 3 * x + 5

Now define the functions:

(a) evaluate p x, which will evaluate a polynomial p for a given value
x.
(b) add p1 p2, which will add two polynomials.
(c) multiply p1 p2, which will multiply two polynomials. 

@ \paragraph{Problem 7} 
We want  to implement sets. Since the most  important thing you can
do with  a set is to  test membership of  a given element, we  want to
represent sets as the datatype Set(a -> Bool). The function a -> Bool
associated with a set is called the charateristic function of the set
in set-theoretic  jargon.  Under such a representation,  the empty set
is represented as  Set (\x -> False). This is  because the empty
set  returns  false  when  tested  for membership  with  any  element.
Similarly the complement of Set f would be Set(\x -> not(f x)).

Under such a representation, write definitions for the following set
theoraetic operations:

a.  insert (inserts an element in the set)
b.  member( tests for membership)
c.  union
d.  intersection 
e.  difference

Is there an advantage of such a representation?

@ \paragraph{Problem 8}  A  well balanced parantheses string (WBPS) is defined by the
grammar

	S ->  (S) S  | epsilon
	
As examples, the strings (), (()) and (())() are WBPS and the
strings )( and (() are not.

     A string which is not WBPS can be converted to a WBPS by removing
some characters from it. e.g. ((() gets converted to (). Of course, by
removing all characters from ((() we  can also get a WBPS, but we want
to remove a minimum number of characters.

  Your  job  is  to  define  a  function errno,  which  when  given  a
parenthesised  string,  would  return  minimum number  of  characters,
removal of which would give a WBPS. As examples, errno ")(" returns 2,
errno ())()))" returns 3, and errno (())() is, of course 0.


@ \paragraph{Problem 9}
Consider  the representation of  a geometric  region as  having the
   type:

      type Region = Point -> Bool

   Point is  given by the  type (Float, Float).  The idea is  that the
   only use that  we shall put a  region to is to ask  whether a point
   belongs to it or not.


    a. First define  a function circle_maker which  will take a radius
   and  produce a  circular region  around the  origin with  the given
   radius.
 
        circle_maker :: Float -> Region

    b. Similarly define a rectangle_maker which will take a length and
    a breadth and produce a rectangle around the origin.

       rectangle_maker :: Float -> Float -> Region

    c. Define the regions not_in, intersection, union, annulus with
    the types 

          not_in :: Region -> Region
          intersection :: Region -> Region -> Region
          union :: Region -> Region -> Region
          annulus :: Region -> Region -> Region

    d. Finally define a function called translate which will translate
    a region to a given distance:


                        

          translate :: Region -> Point -> Region


@ \paragraph{Problem 10} 

Consider the representation of small language in Haskell:

   A program is a list of function definition followed by a single
   expression

       type Program = ([Fundecl], Exp)

          
       data Fundecl = Fun Funname Var Exp  -- single argument only

       data Funname = F | G | H       -- add more names if you want 
    
       data Var = X | Y | Z          -- add more variables if you want 
       
       data Exp = Con Int | Var Var | Add Exp Exp | Funapp Funname Exp

             -- It is permissible for a type and a data constructor to
                have the same name.

    Assume that the  language is eager. Write an  interpreter eval for
    the language:

       eval :: Program -> Int 
<<*>>=
<<Problem1>>
@
\end{document}
