\documentclass[]{article}
\usepackage[margin=20mm]{geometry}
\usepackage{amsmath}
\usepackage{tikz}
%%\usetikzlibrary{intersections}
\usepackage{noweb}
\usepackage{subfig,wrapfig}
\usepackage{amsthm}
\usepackage{fontenc}
\usepackage{graphicx}
\usepackage[dvips]{hyperref}
\newtheorem{excercise}{Excercise}
\newtheorem{axiom}{Axiom}
\newtheorem{theorem}{Theorem}[section]
\newtheorem{lemma}{Lemma}[section]
\newtheorem{remark}{Remark}[section]
\newtheorem{definition}{Definition}[section]
\begin{document}
\paragraph{Problem 1}

Write a function $ps :: Integer \rightarrow Integer$ that calculates the number of the
ways in which an n-operand expression can be parenthesized.  For example, $ps 4$
evaluates to 5 because there are 5 ways of parenthesizing a 4-operand
expression, namely $a-(b-(c-d))$, $ a-((b-c)-d)$,
$(a-b)-(c-d)$,$(a-(b-c))-d$,$((a-b)-c)-d$. (extra credit for using list
comprehension).

\paragraph{Discussion}
An expression $a * b$ where $*$ is any binary operation can be considered as a
binary graph with values are its leaf. Such a binary graph represents
parenthesized expression. For three variables, for instance $a$ $b$, and $c$, we
can have two possible parenthesized expressions: $(a+b)+c, a+(b+c)$.

\begin{figure}[h]
\centering
\subfloat[][]{
\begin{tikzpicture}
\coordinate
    child {[fill] circle (2pt) }
    child {[fill] circle (2pt) } 
    ;
\end{tikzpicture}} 
\hspace{5mm}
\subfloat[][]{
\begin{tikzpicture}
\coordinate
    child {[fill] circle (2pt)}
    child { 
        child {[fill] circle (2pt)}
        child {[fill] circle (2pt)}
    }
    ;
\end{tikzpicture}
\hspace{5mm}
\begin{tikzpicture}
\coordinate
    child { 
        child {[fill] circle (2pt)}
        child {[fill] circle (2pt)}}
    child {[fill] circle (2pt)}
    ;
\end{tikzpicture}}
\caption{\small Figure (a) shows encoding of parenthesized expression $(a*b)$ where $*$
is a binary operation. Figure (b) depicts two possible parenthesized version of
three variable expression.  If binary operation is $+$ then figure depicts
$((a+b)+c)$ and $(a+(b+c))$. We assume that permulation of variable is
immaterial i.e. $(a+b)$ and $(b+a)$ are same expressions.}
\label{fig_bin_tree}.
\end{figure}

One can reformulate above problem as \textit{Given $n$ variables, in how many
ways one can construct such binary-trees are showsn in figure
\ref{fig_bin_tree}.}

\begin{theorem}
For given $n > 2$ variables, one can construct $\sum_{x=1}^{n} f(x) \times
f(n-x)$ where $f(1) = f(2) = 1$.
\end{theorem}
\begin{proof}
We prove it by induction. For $n = 2$, there is 
\end{proof}


<<Problem1>>= 

ps :: Int -> Int
ps 1 = 1 -- base case, only one arg, second is nil
ps 2 = 1 -- base case, only two args.
ps n = psHelper [1..(n-1)] 0 -- more than two args. 

psHelper :: [Int] -> Int -> Int
psHelper [] s = s
psHelper (x:[]) s = s + (ps x) * (ps x)
psHelper (x:y:[]) s = s + 2 * (ps x) * (ps y)
psHelper (x:xs) s = psHelper (init xs) (s + 2 * (ps x) * (ps (last xs)))

{- This operation can be coded with list comprehension which  is painfully
slow. -}
psWithList :: Int -> Int
psWithList 1 = 1
psWithList 2 = 1
psWithList n = sum [((psWithList x) * (psWithList (n-x))) | x <- [1..(n-1)]]

@ %def ps psWithList
@
\paragraph{Problem 2}
\begin{verbatim}
      s e n d
    + m o r e
    ----------
    m o n e y
\end{verbatim}
    Here each of the alphabets above  stand for a distinct digit such that
    the resulting addition is correct.  Write a Haskell expression using list
    comprehension  which will  solve  the puzzle  and  give the  following
    output: $[(s,9), (e,5), (n,6), (d,7), (m,1), (o,0),(r,8),(y,2)]$. 

\paragraph{Discussion}

By looking at the solution, we are assuming that this is radix-10 computation.
By the property of radix-10 computation, in any step carry could be either 0 or
1. Thus $m$ is fixed to be 1, and $s + 1 = 10*1 + o$. Depending on whether there
was a carry from the previous computation, one can formulate the possible set of
equations. Since the computation depends on 'if there was a carry', what could
be a better way than a binary-decision diagram to encode the whole computation. 

\begin{figure}[h]
\centering
\begin{tikzpicture}
\node (root) at (6,10)  [draw] {$root$};
\node (1) at (4,8) [draw] {$d+e=y$};
\node (2) at (8,8) [draw] {$d+e=10+y$};
\node (3) at (0,6) [draw] {$n+r=e$};
\node (4) at (4,6) [draw] {$n+r=10+e$};
\node (5) at (8,6) [draw] {$1+n+r=e$};
\node (6) at (12,6) [draw] {$1+n+r=10+e$};
\node (7) at (0,4) [draw] {$e+o=n$};
\node (8) at (4,4) [draw] {$e+o=10+n$};
\node (9) at (8,4) [draw] {$1+e+o=n$};
\node (10) at (12,4) [draw] {$1+e+o=10+n$};
\node (11) at (4,2) [draw] {$s+m=10+o$};
\node (12) at (8,2) [draw] {$1+s+m=10+o$};
\node (13) at (6,0) [draw] {$m=1$};
\path [->] (root) edge [dashed] (1)
                  edge (2)
            (1) edge [dashed] (3)
                edge (4)
            (2) edge [dashed] (5)
                edge (6)
            (3) edge [dashed] (7)
                edge (8)
            (4) edge [dashed] (9)
                edge (10)
            (5) edge [dashed] (7)
                edge (8)
            (6) edge [dashed] (9)
                edge (10)
            (7) edge [dashed] (11)
                edge (12)
            (8) edge [dashed] (11)
                edge (12)
            (9) edge [dashed] (11)
                edge (12)
            (10) edge [dashed] (11)
                edge (12)
            (11) edge [bend right, dashed] (13)
                edge [bend left] (13)
            (12) edge [bend right, dashed] (13)
                edge [bend left] (13)
            ;
\end{tikzpicture} 
\caption{\small This figure shows the possible sytem of equations for this
problem. A dashed edges shows that there is no carry generated at this level of
addition. For instance, node $n+r=e$ means that no carry was generated when we
added $n$ and $r$. A solid edges shows that a carry is generated. There are 5 equations
in each of system. A total 16 such systems are possible. How many of them will
produce a unique solution?}
\end{figure}

%\begin{eqnarray}
%s &=& 10 + o \\
%s &=& 9 + o \\
%\end{eqnarray}
%
%\begin{wrapfigure}{R}{\textwidth}
%\centering
%\begin{tikzpicture}[level/.style={sibling distance=40mm/#1}, val/.style={circle,draw}]
%\foreach \x/\y/\tag in {3/6/1, 1/4/2, 5/4/3}
%{
%    \node [val] (\tag) at (\x,\y) {$\tag$};
%}
%\foreach \x/\y/\tag in {0/2/4,2/2/5,4/2/6,6/2/7,0/0/8,2/0/9,4/0/10,6/0/11}
%{
%    \node [val] (\tag) at(\x,\y)  {$\tag$};
%}
%\path [->] (1) edge [dashed] (2)
%               edge (3)
%           (2) edge [dashed] (4)
%               edge (5) 
%           (3) edge [dashed] (6)
%               edge (7)
%           (4) edge [dashed, bend right] (8)
%               edge [bend left] (8)
%           (5) edge [dashed, bend right] (9)
%               edge [bend left] (9)
%           (6) edge [dashed, bend right] (10)
%               edge [bend left] (10)
%           (7) edge [dashed, bend right] (11)
%               edge [bend left] (11)
%           
%           ;
%\end{tikzpicture}
%\caption{\small This figure shows the possible sytem of equations for this
%problem. A dashed edges shows that there was no carry generated in previous
%addition. A solid edges shows that a carry was generated. There are 4 equations
%in each of system. A total 8 such systems are possible.}
%\end{wrapfigure}

As the caption of previous figure reads, we need to generate all such 16 systems
of linear equations and test them for unique solutions which condition that all
variables have values between 0 and 10.

One such a system is following.

<<Problem2>>=

sendMoreMoney 
    = [[('s',s) ,('e', e),('n',n),('d',d),('m',m),('o',o),('r',r),('y',y)] | 
        s <- [8,9] , e <- [0..9], n <- [0..9], d <-[0..9], m <- [1]
         , o <- [0,1], r <- [0..9],  y <-[0..9]
         , s /= e , s /= n, s /= d, s /= m , s /=o, s /= r, s /= y
          , e /= n, e /= d, e /= m , e /=o, e /= r, e /= y
          , n /= d, n /= m , n /=o, n /= r, n /= y
          , d /= m , d /=o, d /= r, d /= y
          , m /=o, m /= r, m /= y
          , o /= r, o /= y
          , r /= y
          , (1000 * s + 100 * e + 10*n + d) + (1000 * m + 100*o + 10*r + e) 
                    == (10000*m + 1000*o + 100*n + 10*e + y)]

@ %def sendMoreMoney
@

\paragraph{Problem 3} 
    Using list comprehension, write a Haskell function queens $n$ which
    will generate all solutions of the $n$-queens problem.  You may find it useful
    to represent a solution using only column numbers. For example, a solution to
    the 8-queens problem may be $[1,5,8,6,3,7,2,4]$ which actually means
    $[(1,1),(2,5),(3,8)...]$.


<<Problem3>>=

data Gtree a = Node a [Gtree a]
            | Empty
             deriving (Show, Eq)

-- Convert a given list of pair into a list of nodes. We'll attach these nodes
-- to a root graph.
listToTree :: [(Int,Int)] -> [Gtree (Int, Int)]
listToTree [] = []
listToTree (x:xs) = (Node x []) : (listToTree xs)

-- Generate the chessboard.
allMoves :: Int -> [(Int, Int)]
allMoves n = [(x,y) | x <- [1..n], y <- [1..n]]
initChessBoard = allMoves 4 -- Full chess board

{- 
    Get a chessboard and strip-down rows and columns on which a queen can not be
    placed.
-}
chessboard :: (Int, Int) -> [(Int, Int)] -> [(Int, Int)]
chessboard (a,b) x
    | a > 0 && b > 0 = [(p,q) | (p,q) <- x, p+q /= a+b
                        ,p-q /= a-b, q == (b+1), p /= a ]
    | otherwise = x -- left unchanged

---- Generate all possible location left for other queens when one queen is placed
---- at (a,b) and construct a tree of such moves.
--posMov :: (Int, Int)  -> [(Int, Int)]
--posMov  (a, b) = [(x, y) | (x,y) <- chessboard 
--        , x + y /= a + b
--        , x - y /= a - b
--        , y /= b, x /= a
--      ]
--
{- 
    Generate all possible location left for next queen in the next level.
 -}
posMovNextLevel :: (Int, Int) ->  [(Int, Int)]
posMovNextLevel (a, b)
        = [(x, y) | (x,y) <- chessboard (a, b) initChessBoard
        , x + y /= a + b
        , x - y /= a - b
        , y == (b+1), x /= a
        ]

-- Create a tree and add these
treeNextLevel :: (Int, Int) -> Gtree (Int, Int)
treeNextLevel (x,y) = Node (x, y) $ listToTree (chessboard  (x,y) initChessBoard)

{- Now for all possible node in this tree, we should add next level. -}

{- Test case, start from (1,1) -} 
myTree :: (Int, Int) -> (Int, Int) -> Gtree (Int, Int)
myTree (a,b) [] =  Node (a,b) []
myTree (a,b) (x:xs) 
    = Node (a,b) (map (Node x) listToTree (posMovNextLevel (a, b)))



@

\paragraph{Problem 4}
\label{prob_4}
    Let $x$ and $y$ be two integers such that $1 < x < y$ and $x+y < 100$. 'A' is given
    the $sum (x+y)$ and 'B' is given their product $(x*y)$.  The following conversation
    happens, 
    \begin{enumerate}
    \item [A] I dont't know the numbers.  
    \item [B] I knew that already.  
    \item [A] Now I know the numbers.  
    \item [B] Now I too know the numbers.  
    \end{enumerate}

    Write a Haskell program to find out the numbers. Make use of list comprehension.

\paragraph{Discussion}

    Let's create a geometric picture and see if we can draw some conclusion from
    there. For instance, given numbers honour some inequalities which can be
    represented by some line (after all there are only two numbers!).

    \begin{figure}[h]
    \centering
    \resizebox{\textwidth}{!}{
    \begin{tikzpicture}[domain=-1:10]

    \draw[very thin, color=gray] (-1,-1) grid (10,10); % grid
    
    \draw[->] (-1,0) -- (10,0) node [right] {$a$};
    \draw[->] (0,-1) -- (0,10) node [above] {$b$};

    \draw[color=red, name path=a1] plot (\x, {0.1}) node at (6,0.5) {$a=1$};
    \draw[color=red, name path=b1] plot ({0.1}, \x) node at (0.8,4) {$b=1$};

    \draw[color=red] plot (\x, {10-\x}) node at (8,2.5) {$a+b=100$};
    \draw[color=red, name path=abequal] plot (\x, {\x}) node at (3,2) {$b=a$}; 

    \draw[color=blue, domain=-0.5:8.5, name path=sum] plot (\x, {8-\x}) node at (6,2.5) {$a+b = A$};
    \draw[color=blue, smooth, domain=0.5:10, name path=mult] plot (\x, {5/\x}) node at (5,1.5) {$ab=B$};
    
 %   \fill[name intersections={of=sum and prod, name=i, total=\t}]
 %       \foreach \s in {1...\t}{(i-\s) circle (2pt) node {\s}};

    \end{tikzpicture}
    }

    \caption{Geometric representation of prob \ref{prob_4}.}
    \label{fig:geometric_prob_4}
    \end{figure}

    Since A is given the sum $s$, by looking at it, she concludes that $ 1 < x <
    \frac{s-1}{2} (\frac{s}{2})$ when $s$ is odd (even) and $ \frac{s+1}{2}
    (\frac{s}{2}) < y < {s-1}$. If $s$ is odd then exactly one of these two
    numbers is even while other is odd otherwise both numbers are either even or
    odd. Since no other information is available to A, she says that \emph{She
    does not know the numbers.}.

    B has the product $p$. Now if $p$ has two prime factors than B will know the
    numbers. But how can B be sure by looking at $p$ that A does not know the
    numbers? Since A only has the sum, and there are many possibilities to
    decompose this sum into factors, there is no way one can solve this puzzle.

    However, some arguments can be made if B was to make the first statement.

<<Problem4>>=



@ @

\paragraph{Problem 5} 
    Use the functions map and concat instead of the list comprehension notation
    to deﬁne the following list: [ (x,y+z) | x<-[1..10], y<-[1..x], z<-[1..y] ]

<<Problem5>>=

listGiven = [(x, y+z) | x <-[1..10], y <-[1..x], z <- [1..y]]

listA m = map (\n -> (m,n))(concat (map (\y -> [1+y..y+y]) [1..m]))
listMine = concat (map (\x -> (listA x)) [1..10])

prop_equal = listGiven == listMine
@

\paragraph{Problem 6} 
    Implement foldTree for BTree analogous to fold for Lists. The function
    foldBTree has to provide replacement for each constructor. Implement flatten
    using foldTree.

\paragraph{Discussion}
One can define [[Btree]] in two ways. One using [[Empty]] and [[Node x left
right]] and other is [[Leaf x]] and [[Node left right]]. For each we given
[[foldBtree]].

<<Problem6>>=

{- case 1 -}
data Btree1 a = Null | Node1 a (Btree1 a) (Btree1 a)
    deriving (Show, Eq)

treeBFold1 :: (a -> b -> b -> b) -> b -> Btree1 a -> b
treeBFold1 f e Null = e
treeBFold1 f e (Node1 x l r)
               = f x (treeBFold1 f e l) (treeBFold1 f e r)

{- case 2 -}

data Btree2 a = Leaf a | Node2 (Btree2 a) (Btree2 a)
    deriving (Show, Eq)

treeBFold2 :: (b -> b -> b) -> (a -> b) -> Btree2 a -> b
treeBFold2 _ g (Leaf x) = g x
treeBFold2 f g (Node2 l r) = f (treeBFold2 f g l) (treeBFold2 f g r)

{- Flatten -}
flatten1 = treeBFold1 (\x l r -> l ++ [x] ++ r) []
flatten2 = treeBFold2 (++) (\x -> [x])

@

\paragrah{Problem 7}
    Write a function isBST :: BTree -> Bool which takes a BTree and returns True
    if it is a Binary Search Tree otherwise returns false.  The function should
    traverse the tree only once.

<<Problem7>>=

@

Q8. We  have  seen  that  expressions  in  C-like  languages
    (uncurried  expressions) can  be represented  as  Gtree Char,
    where Gtree is defined as:

           data   Gtree  a = Gnode  a  [Gtree  a]

    Similarly,  expressions in  Haskell-like  languages in  which
    functions  are  applied  one  argument  at  a  time  (curried
    expressions) can be represented as Btree Char, where Btree is
    defined as:

        data  Btree  a = Leaf  a  |   Bnode  (Btree  a ) (Btree  a)

    Write a  function b_to_g  :: Btree Char  -> Gtree  Char which
    will   take  a  Btree   representation  of   a  Haskell-style
    expression and  convert it into  a Gtree representation  of a
    C-style  expression.  Similarly  write a  function  g_to_b ::
    Gtree Char  -> Btree Char which will  take C-style expression
    and convert it into a Haskell style expression.

<<*>>=
import Test.QuickCheck
<<Problem1>>
<<Problem2>>
<<Problem4>>
<<Problem5>>
<<Problem6>>
@

\end{document}
