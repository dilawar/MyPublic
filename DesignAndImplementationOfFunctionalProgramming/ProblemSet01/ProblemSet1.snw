\documentclass{article}
\usepackage{noweb}
\usepackage{hyperref}
\usepackage{amsmath,amsthm} 
\title{Problem Set 01}
\author{Dilawar Singh \\ 
\texttt{dilawar@ee.iitb.ac.in}} 
\date{\today}
\begin{document} \maketitle

\section{Import}
<<Import Modules>>=
module Main where
import Prelude
import Control.Parallel
@
We need to define some of functions which we will need in the course
of solving these problems. Since Haskell does not let different kind
of types to mix with each other, we have to 'coerce' them explicitly.
[[Prelude]] gives extensive support for this, however, we still need
to define some function mostly to save typing.

Also some function have been redefined to shorten their names.

<<Define MyFunctions>>=
intToFloat :: Int -> Float
intToFloat n = fromInteger . toInteger $ n

fI = fromInteger
@
\section{Problem 01}
\paragraph{Statement}
Define a function isPrime which accepts a number n, and  returns  True
if n is prime and False otherwise.

The easiest way to test the primality of a number is to  test  whether
it has any  factor.   This  is  usally  done  by  dividing  the  given
number by the smallest prime number i.e. 2 first.  If this divides the
number, we declare that the given number is not prime, else we  repeat
the process with next prime number. 


However this approach requires that we must  have  a  table  of  prime
numbers. It is not possible to use this approach if such table is not
available. To overcome this difficuly, one can choose to simply divide
the given number by integers starting with 2 till one finds a factor.
It has been proven that for a number $N$, one need not test beyond the
integer $\lfloor \sqrt{N} \rfloor$ (Why?). 


Let us produce a list\footnote{Think of a list a dictionary with keys
and corresponding elements in it.} of numbers from 2 to $\lfloor
\sqrt{N} \rfloor$ (both inclusive). Function \texttt{mkList} takes an
integer and returns a list of integers. Note that, in function
[[mkList]], we are passing n (with type \texttt{Integer}) to a
function \texttt{sqrt} which only works on Reals. Since, [[sqrt]] is
only defined for reals, it is customary to convert its argument to a
real before passing it to function \texttt{sqrt}. We have used
\texttt{fromInteger} for this purpose.


After creating a such a list, we need to test whether any element of
this list divides the given number $N$. Function [[isAnyFactor]] is
written to determine this. One can see that it uses another function
[[isFactor]] which tests if two numbers are coprime \footnote{Two
numbers are coprime if and only if they do not have any commonn
factor.} or not. If they are coprime then it return \texttt{False},
else it returns \texttt{True}. In function [[isFactor]], we built a
    list of Boolean values using [[isFactor]] recursively. Now, it
    follows that if all elements of this list are \texttt{False}, then
    there is no number between 1 and $\sqrt{N}$ which divides the
    number $N$, or, \textbf{the number is prime}.


One surely can do some tricks. Such as by looking at the last digit,
we can discard all even numbers and multiple of 5 etc.

<<Problem 01>>=
{- We need to make a list of integers from 2 to square root of N -}

mkList :: Integer -> [Integer]
mkList n = [2..k] 
    where k = toInteger (ceiling $ sqrt $ fromIntegral n )

{- Check if a number divides another number. -}
isFactor :: Integer -> Integer -> Bool
isFactor m n | mod m n == 0 = True
             | otherwise = False

--myMap :: (Integer -> Integer -> Bool) ->  [Integer] -> [Bool]
--myMap f  [] = []
--myMap f  (x:xs) = f x : myMap f xs

{- This function returns array of Bool indicating if the element from
the list created by mkList is a factor of the given number or not. -}

isAnyFactor :: Integer -> [Integer] -> [Bool]
isAnyFactor _ [] = [False]
isAnyFactor z (x:xs) = isFactor z x : isAnyFactor z xs


{- Now test for primality. If a given number is prime, then all of the
elements in the list returned ny isAnyFactor must be False -}
isPrime :: Integer -> Bool
isPrime n = not $ or $ isAnyFactor n (mkList n)

@

\section{Problem 2}
\paragraph{Statement}
A  perfect  number  is  one  whose  factors  add  up  to  itself.
For example 6 and 28 are the  first two perfect numbers.  Write a function
isPerfect that returns True if the input number n is a perfect  number
and False otherwise. 

\paragraph{Discussion}
    
    Oddly, here we consider 1 as a factor of a number $N$. Why would one
    do that is beyond the level of intellect of this writer. May be the
    urge to define a new fascinating number was very strong among
    Mathematician.


First we write a function [[getFactors]]. This function will return
all of factors including 1. Then the testing is trivial. We note that
it is enough to test whether any number between 1 and $N/2$ is a
factor of $N$. We collect then in a list and check if the [[sum]] of
this list is equal to the $N$. If yes, then the number is perfect,
otherwise, it is not-perfect I guess.


\paragraph{Note}
This algorithm should not be run on large numbers
even if your computer run faster than Chacha Chaudhary's brain. This
implementation is naive.


<<Problem 02>>=
{- Make a list which contains number from 1 to n/2. All of the factor
reside in this range only. -}

mkListAgain :: Integer -> [Integer]
mkListAgain n = [1..k]
    where k = floor ((fromIntegral n)/ 2)

{- Construct a list which contains all factors of n. -}
allFactors :: Integer -> [Integer] -> [Integer]
allFactors _ [] = []
allFactors n (x:xs) | (isFactor n x) == True = x : (allFactors n xs)
                   | otherwise = allFactors n xs

getFactors :: Integer -> [Integer]
getFactors n = allFactors n $ mkListAgain n

{- Now testing is trivial. -}
isPerfect :: Integer -> Bool
isPerfect n | sum (getFactors n) == n = True
            | otherwise = False

@
\section{Problem 3}
\paragraph{Statement}
Write a  function powerFactor which takes two arguments  a and b and
returns the largest n such that

\begin{equation*}
a  =  b^n  *  k \quad  if \quad a \geq  b \\ 
b  =  a^n  *  k \quad otherwise 
\end{equation*}

\paragraph{Discussion}
It says that find  $n$ such that $a^n$ divides $b$ if $ a \geq
b$ otherwise swap $a$ and $b$ and find such $n$ again. 

We start from a piece of information that if for any $n$, $a^n$ does not
divide $b$ then no power of $a$ higher than $n$ will do so. We give a
formal proof for this.

\begin{proof} 
If for some $m > 0$, $a^m$ does not divide $b$ then the theorem says
that there exists no $n \geq 1$ such that $a^{m+n}$ divides $b$. We
will assume otherwise and show that there is a contradition. Since
contradition of a \textbf{false} statement is believed to be
\textbf{true}, we will conclude other proof.

It is known that $a^m$ does not divide $b$ so we can write it in
following way using Chinese remainder theorem.
\begin{equation*}
b = n_1 a^m + r_1, \quad where \quad 0 < r_1 < a^m 
\end{equation*}

Now we write our assumption that $a^{m+n}$ divides $b$. Using the
Chinese remainder theorem, we write
\begin{equation*}
b = n_2 a^{m+n} 
\end{equation*}

Above relations implies that
\begin{equation*}
n_1 a^m + r_1 = n_2 a^{m+n} \\
\implies a^m (n_1 - n_2 a^n ) = r_1 \\
\implies 0 < n_2 a^n - n_1 < 1
\end{equation*}

which is impossible since $n_2 a^n - n_1$ is an integer and thus it can
never have its value between 0 and 1. This contradiction concludes our
proof.
\end{proof}

Now talk about the algorithm for this problem. From above proof we
have to find a lowest power of $a$ which divied $b$ i.e. $a^0$ since
power 0 always divides. Then we will keep increamenting $n$ in $a^n$
till we get a situation when $a^n$ does not divide b anyfurther.
Whenever $a^n$ stops dividing $b$ we conclude that $n-1$ is the
highest power of $a$ which can divide $b$. If $b \geq a$ then we can
swap $a$ and $b$ and use the same algorithm.

In this algorithm, we test on the values of $n$ starting from $0$.
Then we keep on increamenting $n$ till we reach our desired result.
For such a test, \texttt{while} loop in \textbf{c language} are most
natural although one can use \texttt{for} and \texttt{if-then-else}
constructs also. I love recursion and Haskell provides an elegent way
to implement recursion. Usually the recursion is done over a list and
unless the list is bounded recursion will not terminate. And yes,
defining infinite list is possible in Haskell.

In this particular problem, one can choose to recurse over an infinite
list and breaks the recursion when one finds that $a^n$ no longer
divides $b$. Such a condition is guarenteed to occur and hence one can
safely assume that the recursion will terminate given that a condition
(guard) has been implemented to test if such a condition is satisfied.
This approach is implemented in [[powerFact1]] function.


Another approach, which I prefer, is to look out for finite list and
write a function which recurse over it and keeps the result in a list
[[resultList]]. When such a recursion is over, one simply reads out
the desired result or the location of desired result from the
[[resultList]]. This approach has one weakness. We may get our $n$ in
the first recursion itself (if $a$ and $b$ are coprime) but our
algorithm will not stop here. This approach is implemented as
[[powerFact2]] function.


Is there any merit in [[powerFact2]] as than personal whim. There is
at least one benefit of using [[powerFact]]. If one has to implement
this algorithm as a VLSI circuit, then one saves some hardware. In
[[powerFact1]], the extra guard is additonal harware. In
[[powerFact2]], we may save some hardware at the cost of some extra
time. So how much time one has to sacrifice?

\paragraph{Timing analysis} We can write $ b = k a^n + r \quad where
\quad 0 \leq r \le a^n $. If $r =0 $ then $a^n$ divides $b$. This
implies that $k a^n \leq b \le k a^(n+1) \implies n \le \log_a
\frac{b}{k} \le n+1 $. If $a^n$ divides $b$ than $ n = \log_a
\frac{b}{k}$. Thus, $n$ is not a very large number assuming that $k=1$
(worst case).

There is strong case for [[powerFact1]] when one number is many order
of magnitude bigger than the other one.

<<Problem 03>>=

-- Pick a choice
powerFactor :: Integer -> Integer ->  Int
powerFactor a b | b == 0 = error "Divide by zero."
                | b == 1 
                    = error "You freaking kidding me! Divisor is 1."
                | a == 0 = error "-Nan"
                | b > a = powerFactor b a
                | floor (logBase (fromInteger b) (fromInteger a)) >
                10 = powerFact1 a b [0..]
                | otherwise = powerFact2 a b 

{- It is important that in 'otherwise' guard, we put (x-1) rather that
head(xs) - 1. Why? -}

powerFact1 :: Integer -> Integer -> [Int] -> Int
powerFact1 a b (x:xs)| (mod a (b^x) == 0) = powerFact1 a b xs
                     | otherwise = x - 1

{- Here is our lengthy function. -}
powerFact2 :: Integer -> Integer -> Int
powerFact2 a b = getPosition . recurseOverList a b $ makeList a b

makeList :: Integer -> Integer -> [Int]
makeList m n = [1..p] where
    p = floor (logBase (fromInteger n) (fromInteger m))

recurseOverList :: Integer -> Integer -> [Int]  -> [Bool]
recurseOverList m n [] = []
recurseOverList m n (x:xs) | (mod m (n^x) == 0) = True : recurseOverList m n xs
                           | otherwise = False : recurseOverList m n
                           xs

-- It takes an array of booleans and return the position where
-- False has occured first time.
getPosition :: [Bool] -> Int
getPosition [] = 0
getPosition (x:xs) | x == True = 1 + getPosition xs
                   | otherwise = 0

@
\subsection{Problem 4}
Simpson’s rule is an accurate  method  of  numerical  integration.
Using Simpson’s rule, the integral of a function f  between  a  and  b
is approximated as

  $h/3* [y_0 + 4*y_1 + 2*y_2 + 4*y_3 + 2*y_4 +...  + 4*y_{n-1}  +
  y_n$

   where $h = (b−a)/n$, for some even integer  n,  and $y_k  =
   f(a+kh)$.  (Increasing  n  increases  the   accuracy   of   the
   approximation.)

Define a procedure simpson that takes as arguments f, a, b, and n  and
returns the value of the  integral, computed using Simpson’s Rule. Use
your procedure to integrate cube between 0 and 1 (with n = 100  and  n
= 1000).

\paragraph{Discussion}
Simpson rule is very accurate yet sufficiently simple  for
numerical integration
\footnote{\href{http://www.youtube.com/watch?v=uc4xJsi99bk}{A nice
tutorial on Simpson Rule.}}. We breaks the region of integration into
even number of smaller subregion (not neccessarily equal). Then we
calculate the area of each subregion and adds all them up. The
function is approximated by a quadratic in each subregion.

Assume that our function $f(x)$ is to be integrated over a range $R = [a,
b]$. First we divide $R$ into $2m$ number of smaller intervals where $m
\geq 1$. Usually we chose these intervals to be equal for simplicity.
Equallity of region is a not a condition enforced by simpson method.
We can mark these sub-intervals on the x-axis as $a, x_1, x_2 \ldots
x_{2m-1} , b$.

Consider a interval $x_{even}, x_{odd}, x_{even}$. Surely, our
function $f(x)$ is defined over them and have some values. We
approximate our function $f(x)$ with a quadratic which  passes
through points which $f(x)$ takes on these values. By forcing this
constrains, we get the 'simpson rule'.

One interesting thing about this algorithm is that it is inherently
parallel i.e. one can calculate area corrosponding to each
sub-interval in parallel and sum their results up to get the total
area. Also one may like to calculate some part of the function more
accurately - with finer approximation. This extensive calculation can
be done either by sending the job to more able processor or by
dividing the job into more number sub-tasks (i.e.  divide the
sub-interval into finer sub-intervals). In any case, this should be
done using concurrency. On these lines we design our implementation.

\paragraph{Implementation}

Our tompmost function [[simpson]] takes four arguements, f, a,
b, n, where f is a function (Float -> Float), a is lower limit of
integration, b is upper limit, and n is the number of parallel
computations.

We will break up our interval into n sub-interval. In this
implementation we break the interval into equal parts and each such
interval is computed in parallel. To compute each sub-interval, we
write [[simpsonSub]]. [[simosonSub]] creates a list of n elements and
map method [[simpson]] on it. One should avoid Weak Head Normal Form.


<<Problem 04>>=
{- 
    Create a list which contains limit-points (a_i, b_i, n_i) and the
    number of points for each interval.
-}
mkListOfIntervals :: Float -> Float -> Int -> [(Float, Float)]
mkListOfIntervals a b n = listOfSubIntervals a [1..n]
                            ((b-a)/(intToFloat n))

{- 
    'points' are number of points in each subinterval. For example if
    the subinterval (1,2) is to be broken into 1000 sub-interval  then
    point value should be 1000. It should be even though we have given
    a 'error-handling' in topmost function. If 'point' is not an even
    number  than  we  convert  it  into  the  nearest   even   number.

    NOTE : IN THIS IMPLEMENTATION THE POINT VALUE HAS BEEN FIXED TO
    THE VALUE OF 1000.
-}

listOfSubIntervals :: Float -> [Int] -> Float -> [(Float, Float)]
listOfSubIntervals a [] _ = []
listOfSubIntervals a (x:xs) h
    | h == 0.00 = error "Interval is zero.!"
    | otherwise = ( a  + (intToFloat $ (-) x 1)*h , ( a +
    ((*) (intToFloat x) h))) : listOfSubIntervals a xs h

{- 
    To avoid Weak Head Normal Form (WHNF) we need to force the 
    evalution of list. Otherwise lazy-evalution will give us weak
    head normal form which we do not want.
-}
forceList :: [a] -> ()
forceList [] = ()
forceList (x:xs) = pseq x forceList xs

{-
    This is our top-most function. 'n' is number of parallel
    computation in this function.
-}

simpson :: (Float-> Float) -> Float -> Float -> Int -> Float
simpson f a b n 
    | a > b = error "Upper limit is less than the lower limit!"
    | n <= 0 = error "n should be a positive integer."
    | otherwise = sum $ callSimpson f (mkListOfIntervals a b n)

callSimpson :: (Float -> Float) -> [(Float, Float)] -> [Float]
callSimpson f [] = []
callSimpson f (x:xs) = (goodSimpson f (fst x) (snd x) 100) `pseq` 
                        ((goodSimpson f (fst x) (snd x) 100) : callSimpson f xs)


goodSimpson :: (Float -> Float) -> Float -> Float -> Int -> Float
goodSimpson f a b n = (h/3) * (sum $ makeArraySimpson f a b [0..n] h)
    where h = (b - a) / (fromIntegral n)

makeArraySimpson :: (Float -> Float) -> Float -> Float -> [Int] -> Float -> [Float]
makeArraySimpson f a b [] _ = []
makeArraySimpson f a b (x:xs) h 
    | x == 0 = (f  a) : makeArraySimpson f a b xs h
    | xs == [] = (f  b) : makeArraySimpson f a b xs h
    | mod x 2 /= 0 = (4.0 * f(a+(fromIntegral x)*h)) : makeArraySimpson f a b xs h
    | mod x 2 == 0 = (2.0 * f(a+(fromIntegral x)*h)) : makeArraySimpson f a b xs h

myF :: (Float -> Float)
myF x = x^2 - 2*x + 1 

testSimpson = simpson myF 0 4 1000
@

5.  Represent a fraction as (Float, Float), and define  the  following
functions:

 (a) makeFraction a b which returns (x,y) such that x/y  is  a  proper
fraction equivalent to a / b. For eg, make fraction 10 4 should return
(5,2).

 (b) numer f and denom f which return the numerator and denominator of
f.

 (c) sum f1 f2 which returns f1+f2.

 (d) equal f1 f2 which returns True if  f1==f2  and  False  otherwise.


\paragraph{Discussion}

A fraction is defined with type (Float, Float) which is  a rational number and can be
converted into a type of (Int, Int). To represent this rational number into its
\texttt{minimum form}, one has to divide both numerator $num$ and denominator
$den$ by $gcd(num, den)$ where $gcd(a,b)$ is the greatest common divisor of $a$
and $b$.

To calculate gcd of two numbers, one can use Euclid algorithm. Later we simply
divide both numerator and denominator by their gcd.

<<Problem 05>>=
calculateGCD :: Integer -> Integer -> Integer
calculateGCD m n 
        | m == n =  m
        | m * n == 0 = error "Zero"
        | n > m = calculateGCD n m
        | m `rem` n == 0 = n
        | m `rem` n /= 0 = calculateGCD n (m `rem` n)
        | otherwise = error ("Some exceptional error has occured." ++ 
            " I am not designed to handle such an error. Existing...")


@
6. Define a function numReverse  n which returns a number whose digits
are the in the reverse order of the  digits  in  n.   numReverse  1234
should   return   4321,   numReverse    120    should    return    21.


<<Problem 06>>=

@
7.  Write a function hasSolution a b  c  which  returns  True  if  the
diophantine equation ax + by = c has solutions for integer values of x
and y. Hint : What condition should  c satisfy with respect to a and b
for a solution to exist?

<<Problem 06>>=

@

\section{Problem 7}
The zero of a function $f(x)$ is a value $x_0$ such that $x_0 = f  (x_0
)$. If $x_n$ is the current approximation of the zero of a function, then
a better  approximation $x_{n+1}$ is  given by:

              $ x_{n+1}  = x_n −  f (x_n)/f' (x_n )$

Use this fact to define a function [[approxSqrt n  eps]] that  finds  the
square root of a number n.  It stops when one approximation is  within
eps of the next.
 
<<Problem 07>>=
approxSqrt :: Float -> Float -> Float
approxSqrt n eps = helperApprox n n eps err where
    err = n^2 - n

helperApprox :: Float -> Float -> Float -> Float -> Float
helperApprox n x eps1 err
    | err < eps1 = x
    | otherwise = helperApprox n (nextX x) eps1 (x - nextX x) where
        nextX x = x - (x^2 - n)/(2*x)
            
@
8.  Write a function phi  n  representing  Euler’s  totient  function.

In mathematical notation, phi(m) is defined as the number of  positive
integers r(1 <= r <= m) that are coprime to m.  Example: m = 10 has  r
= 1,3,7,9.  Thus phi(10) = 4.
<<Problem 08>>=
coprime :: Integer -> Integer -> Bool
coprime a b 
        | b > a = coprime b a
        | a * b == 0 = error "Nonnegative integers only"
        | b == 1 = True
        | calculateGCD a b == 1 = True
        | otherwise = False


phi :: Integer -> Int
phi n | n == 0 = 0
      | n < 0 = error "Only non-negative numbers"
      | otherwise = length (filter  (coprime n) [1..n])

@ 

<<*>>=
<<Import Modules>> 
<<Define MyFunctions>> 
<<Problem 01>> 
<<Problem 02>> 
<<Problem 03>> 
<<Problem 04>> 
<<Problem 05>> 
<<Problem 06>> 
<<Problem 07>> 
<<Problem 08>> 

main :: IO ()
main = do
 --   x <- simpson myF 0.3 2.3 100
    putStrLn "The result is:" 
--    putStrLn (show x)
@ 

\end{document}
