import XMonad
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.XPropManage
import XMonad.Hooks.FadeInactive
import XMonad.Util.Run(spawnPipe)
import XMonad.Util.EZConfig(additionalKeys)
import XMonad.Prompt
import XMonad.Prompt.RunOrRaise
import System.IO
import qualified XMonad.StackSet as W
import XMonad.StackSet(stack)
import XMonad.Actions.TagWindows
 
main = do
  workspaceBarPipe <- spawnPipe myStatusBar
  spawn myConkyBar
  xmonad $ defaultConfig
    { manageHook = manageDocks <+> manageHook defaultConfig <+> myManageHook
    , layoutHook = avoidStruts $ layoutHook defaultConfig
    , terminal = "xterm -bg black -fg white"
    , workspaces = myWorkspaces
    , startupHook = myStartupHook
    , logHook = myLogHook workspaceBarPipe >> fadeInactiveLogHook 0xdddddddd
    , modMask = mod4Mask
    } `additionalKeys`
    [ ((mod4Mask .|. shiftMask, xK_z), spawn "xscreensaver-command -lock")
    , ((controlMask, xK_Print), spawn "sleep 0.2; scrot -s")
    , ((mod4Mask, xK_t), spawn "gnome-terminal")
    , ((0, xK_Print), spawn "scrot")
    , ((mod4Mask, xK_p), runOrRaisePrompt defaultXPConfig)
    , ((mod4Mask, xK_m), focusUpTaggedGlobal "mail")
    , ((mod4Mask, xK_b), focusUpTaggedGlobal "web")
    , ((mod4Mask, xK_d), focusUpTaggedGlobal "dev")
    , ((0, 0x1008FF11), spawn "mpc volume -10")
    , ((0, 0x1008FF12), spawn "mpc volume 0")
    , ((0, 0x1008FF13), spawn "mpc volume +10")
    , ((0, 0x1008FF14), spawn "mpc toggle")
    , ((0, 0x1008FF16), spawn "mpc prev")
    , ((0, 0x1008FF17), spawn "mpc next")
    ]
 
ws_term = "1:control"
ws_web = "2:read"
ws_dev = "3:dev"
ws_comms = "4:write"
ws_vid = "5:web"
ws_mus = "6:serv"
ws_stats = "7:mult"
ws_vms = "8:vms"
ws_9 = "9:others"

myStatusBar :: String
myStatusBar = "dzen2 -fn '-*-terminus-bold-r-normal-*-12-*-*-*-*-*-*-*'  -bg '#000000' -fg '#444444' -sa c -x 0 -y 0 -e '' -ta l -xs 1"
 
myConkyBar :: String
myConkyBar = "sleep 1 && conky -c ~/.conky_time | dzen2 -fn '-*-terminus-bold-r-normal-*-12-*-*-*-*-*-*-*' -bg black -fg green -h 10 -sa c -x 1000 -y 0 -e '' -ta r -xs 1"
 
myLogHook :: Handle -> X ()
myLogHook h = dynamicLogWithPP $ defaultPP
      {   ppCurrent	= dzenColor "black" "green" . pad
	, ppVisible	= dzenColor "black" "lightgreen" . pad
	, ppHidden	= dzenColor "#cccccc" "" . pad
	, ppHiddenNoWindows = dzenColor "#444444"  "" . pad
	, ppUrgent	= dzenColor "" "red"
	, ppWsSep    = " "
	, ppSep      = " | "
	, ppTitle    = (" " ++) . dzenColor "green" "" . dzenEscape
	, ppOutput   = hPutStrLn h
 
      }
 
myWorkspaces = [ ws_term,ws_web,ws_dev,ws_comms,ws_vid,ws_mus,ws_stats,ws_vms,ws_9 ]
 
myManageHook = ( composeAll
    [ appName =? "mutt" --> doShift ws_comms
    , appName =? "irssi" --> doShift ws_comms
    , className =? "firefox" --> doShift ws_web
    , className =? "virtualbox" --> doShift ws_vms
    , appName =? "htop" --> doShift ws_stats
    , appName =? "feh" --> doShift ws_stats
    , appName =? "dev1" --> doShift ws_dev
    , appName =? "dev2" --> doShift ws_dev
    ] ) <+> xPropManageHook xPropMatches
 
myStartupHook = do
  --spawn "urxvt -title mutt -name mutt -e mutt -y"
  --spawn "firefox"
  spawn "gnome-terminal"
  spawn "mpd"
  --spawn "urxvt -title dev1 -name dev1"
  --spawn "urxvt -title dev2 -name dev2"
  --spawn "virtualbox"
 
xPropMatches :: [XPropMatch]
xPropMatches = [ ([(wM_CLASS, any ("mutt"==))], pmX(addTag "mail"))
               , ([(wM_CLASS, any ("rhythmbox"==))], pmX(addTag "mus"))
               , ([(wM_CLASS, any ("centerim"==))], pmX(addTag "chat"))
               , ([(wM_CLASS, any ("firefox"==))], pmX(addTag "web"))
               , ([(wM_CLASS, any ("anjuta"==))], pmX(addTag "dev"))
               ]
